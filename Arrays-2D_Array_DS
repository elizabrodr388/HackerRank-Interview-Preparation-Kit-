import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the hourglassSum function below.
    static int hourglassSum(int[][] arr)
    {
        int changeArr[][] = {{0,0},{1,-1},{-1,-1},{1,0},{-1,0},{1,1},{-1,1}};
        int maxCount = Integer.MIN_VALUE;

        //loop through the array, except for the edges
        for (int r = 1; r < 5; r++)
        {
            for (int c = 1; c < 5; c++)
            {   
                //add up the hourglass
                int count = 0;
                for (int i = 0; i < 7; i++)
                {
                    int rChange = changeArr[i][0];
                    int cChange = changeArr[i][1];
                    count += arr[r+rChange][c+cChange];
                }

                //update maxCount if necessary
                maxCount = (count > maxCount) ? count : maxCount;
            }
        }

        return maxCount;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int[][] arr = new int[6][6];

        for (int i = 0; i < 6; i++)
        {
            String[] arrRowItems = scanner.nextLine().split(" ");
            scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

            for (int j = 0; j < 6; j++)
            {
                int arrItem = Integer.parseInt(arrRowItems[j]);
                arr[i][j] = arrItem;
            }
        }

        int result = hourglassSum(arr);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}

