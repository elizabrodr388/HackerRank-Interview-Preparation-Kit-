import java.io.*;
import java.math.*;
import java.security.*;
import java.text.*;
import java.util.*;
import java.util.concurrent.*;
import java.util.regex.*;

public class Solution {

    // Complete the sockMerchant function below.
    static int sockMerchant(int n, int[] ar)
    {
        /* 
           Step 1: Sort the array
           Step 2: Do a linear search
            - count up the number of that sock
            - then when we get to another type of sock, divide by 2 
            - add that number to a pair count
        */

        //sort the array from least to greatest
        Arrays.sort(ar);

        int numPairs = 0;
        int sameCount = 1;
        for (int i = 0; i <= n - 2; i += 1)
        {
            //if it equals, we will add to sameCount
            if (ar[i] == ar[i+1])
            {
                sameCount += 1;
            }
            //the trigger to update the numPairs is a change in the number
            else
            {
                numPairs += sameCount/2;
                sameCount = 1;
            }
        }
        numPairs += sameCount/2;

        return numPairs;
    }

    private static final Scanner scanner = new Scanner(System.in);

    public static void main(String[] args) throws IOException {
        BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(System.getenv("OUTPUT_PATH")));

        int n = scanner.nextInt();
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        int[] ar = new int[n];

        String[] arItems = scanner.nextLine().split(" ");
        scanner.skip("(\r\n|[\n\r\u2028\u2029\u0085])?");

        for (int i = 0; i < n; i++) {
            int arItem = Integer.parseInt(arItems[i]);
            ar[i] = arItem;
        }

        int result = sockMerchant(n, ar);

        bufferedWriter.write(String.valueOf(result));
        bufferedWriter.newLine();

        bufferedWriter.close();

        scanner.close();
    }
}

